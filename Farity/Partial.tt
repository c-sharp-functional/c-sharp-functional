<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Text" #>
<#

var args = "abcdefghij";

string T(int i)
{
	return "T"+i;
}

string GetTs(string pattern)
{
	return string.Join(", ", pattern.Select((c, i) => c == '0' ? T(i+1) : "").Where(x => !string.IsNullOrWhiteSpace(x)));
}

string GetAllTs(string pattern)
{
	return string.Join(", ", Enumerable.Range(1, pattern.Length).Select(T));
}

string GetTsWithResult(string pattern)
{
	return GetTs(pattern) + ", TResult";
}

string GetAllTsWithResult(string pattern)
{
	return GetAllTs(pattern) + ", TResult";
}

string GetArgumentNames(string pattern)
{
	return
		string.Join(", ",
			pattern.Select((c, i) => c == '0' ? args[i].ToString() : "").Where(x => !string.IsNullOrWhiteSpace(x)));
}

string GetAllArgumentNames(string pattern)
{
	return string.Join(", ", args.Substring(0, pattern.Length).AsEnumerable());
}

IEnumerable<string> GetCleanPartialArgs(IEnumerable<string> partialArgs)
{
	return partialArgs.Reverse().SkipWhile(p => p.StartsWith("P")).Reverse();
}

string GetPartialArgs(string pattern)
{
	var partialArgs =
		pattern
			.Select((c, i) =>
				c == '1'
					?  $"{T(i+1)} {args[i]}"
					: $"P p{args[i].ToString().ToUpperInvariant()}")
			.Where(x => !string.IsNullOrWhiteSpace(x));
	return string.Join(", ", GetCleanPartialArgs(partialArgs));
}

IEnumerable<string> GetPatterns(string s, int digitsLeft, List<string> list = null)
{
	list = list ?? new List<string>();
	return digitsLeft == 0
		? list.Concat(new[] {s})
		: GetPatterns(s + "0", digitsLeft - 1, list).Concat(GetPatterns(s + "1", digitsLeft - 1, list));
}

string PrintFunctionsForArity(int i)
{
	var sb = new StringBuilder();
	sb.AppendLine($"\t\t#region Arity {i}");
	sb.AppendLine();
	var allZeroes = new String(new char[i]).Replace('\0', '0');
	var allOnes = new String(new char[i]).Replace('\0', '1');
	var patterns = GetPatterns("", i).Except(new[] {allZeroes, allOnes});
	foreach(var pattern in patterns)
	{
		var allTs = GetAllTsWithResult(pattern);
		sb.AppendLine($"\t\tpublic static");
		sb.AppendLine($"\t\t\tFunc<{GetTsWithResult(pattern)}>");
		sb.AppendLine($"\t\t\tPartial<{allTs}>(");
		sb.AppendLine($"\t\t\t\tFunc<{allTs}> function,");
		sb.AppendLine($"\t\t\t\t{GetPartialArgs(pattern)})");
		sb.AppendLine($"\t\t=> ({GetArgumentNames(pattern)}) => function({GetAllArgumentNames(pattern)});");
		sb.AppendLine();
	}
	sb.AppendLine("\t\t#endregion");
	return sb.ToString();
}
#>
using System;
using P = Farity.Placeholder;

namespace Farity
{
	public static partial class F
	{
<#  
for(int i = 2; i < 11; i++)
{
#>
<#= PrintFunctionsForArity(i) #>
<#
}
#>
	}
}
